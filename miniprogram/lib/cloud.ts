//~~** This file is auto generated by tools, please DO NOT EDIT it. **~~
import type { main as functionContext } from '@cloud/functions/context'
import type functionFormat from '@cloud/functions/format'
import type functionSum from '@cloud/functions/sum'
import type functionTransfer from '@cloud/functions/transfer'

type PromiseType<T> = T extends Promise<infer _> ? T : Promise<T>

type PromiseReturnType<T extends (...args: any) => any> = (...args: Parameters<T>) => PromiseType<ReturnType<T>>

export const cloudContext = (data?: any): PromiseType<ReturnType<typeof functionContext>> => {
  return wx.cloud.callFunction({ name: 'context', data }).then(res => res.result as any)
}

export const cloudFormat: PromiseReturnType<typeof functionFormat> = object => {
  return wx.cloud.callFunction({ name: 'format', data: { object } }).then(res => res.result as any)
}

export const cloudSum: PromiseReturnType<typeof functionSum> = (a, b) => {
  return wx.cloud.callFunction({ name: 'sum', data: { a, b } }).then(res => res.result as any)
}

export const cloudTransfer: PromiseReturnType<typeof functionTransfer> = url => {
  return wx.cloud.callFunction({ name: 'transfer', data: { url } }).then(res => res.result as any)
}

export default {
  context: cloudContext,
  format: cloudFormat,
  sum: cloudSum,
  transfer: cloudTransfer
}